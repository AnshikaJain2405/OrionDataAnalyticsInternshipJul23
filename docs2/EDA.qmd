---
title: SETUP
jupyter: python3
---



- pandas to be able to read data
- matplotlib to plot bar charts and basic histograms 
- seaborn to plot box charts easily and then subplots 
- sklearn for machine learning implementation

```{python}
import pandas as pd
import matplotlib.pyplot as plt 
import seaborn as sns 
from dotenv import load_dotenv
import os

load_dotenv()
ROOT_DIR = os.environ.get("ROOT_DIR")
os.chdir(ROOT_DIR)
```

## DATA INGESTION

```{python}
df = pd.read_csv("data/raw/UCI_Credit_Card.csv")
```

## DATA CLEANING

```{python}
df.head()
```

```{python}
df.tail()
```

```{python}
df.info()
```

```{python}
df.describe()
```

- Checking variation of credit card limit 

```{python}
values = [df.LIMIT_BAL]
bins = [5000, 100000, 200000, 500000, 800000, 1100000]
plt.hist(values, bins, edgecolor = 'black')
plt.title("variation of credit card limit ")
plt.show()
```

### checking unique values of cols

```{python}
exclude_columns = ['LIMIT_BAL', 'AGE', 'BILL_AMT1', 'BILL_AMT2', 'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6', 'PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6']

for column in df.columns:
    if column not in exclude_columns:
        unique_values = df[column].unique()
        print(f"Unique values in {column}: {unique_values}")
```

### checking for null

```{python}
df.isnull().sum()
```

### replacing the numeric entry values with actual 

- changing sex given as 1 to M , 2 to F
- have to change it to string type for it to accept this cmd

```{python}
change = {'1':'M', '2':'F'}
df['SEX'] = df['SEX'].astype(str).replace(change)  
```

- since 6 and 5 both are unknowns, changing 6 to 5

```{python}
df['EDUCATION'] = df['EDUCATION'].replace({6:5})
```

- nothing is given about 0 hence changed it to 3

```{python}
df['MARRIAGE'] = df['MARRIAGE'].replace({0:3})
```

- changed [1 to married] [2 to single] [3 to others]

```{python}
df['MARRIAGE'] = df['MARRIAGE'].astype(str).replace({'1':'married', '2':'single', '3':'others'})
```

### Renaming the Attributes

- PAY_(x) --> PAY_(month)  

```{python}
df.rename(columns={'PAY_0':'REPAY_SEPT','PAY_2':'REPAY_AUG', 'PAY_3':'REPAY_JUL', 'PAY_4':'REPAY_JUN', 'PAY_5':'REPAY_MAY', 'PAY_6':'REPAY_APR' }, inplace=True)
df
```

- BILL_AMT(x) --> BILL_(month)

```{python}
df.rename(columns={'BILL_AMT1':'BILL_SEPT', 'BILL_AMT2':'BILL_AUG', 'BILL_AMT3':'BILL_JUL', 'BILL_AMT4':'BILL_JUN', 'BILL_AMT5':'BILL_MAY', 'BILL_AMT6':'BILL_APR'}, inplace=True)
df
```

- PAY_AMT(x) --> PAID_(month)

```{python}
df.rename(columns={'PAY_AMT1':'PAID_SEPT', 'PAY_AMT2':'PAID_AUG', 'PAY_AMT3':'PAID_JUL', 'PAY_AMT4':'PAID_JUN', 'PAY_AMT5':'PAID_MAY', 'PAY_AMT6':'PAID_APR'}, inplace=True)
df
```

### finding correlation

- no inference from correlation 

```{python}
selected_float_columns = df.select_dtypes(include='float')
correlation_matrix = selected_float_columns.corr()
sns.heatmap(selected_float_columns)
plt.title("correlation heatmap")
```

## FEATURE ENGINEERING

### sum of repay_(month)

- found rows with highest sum, ie, rows with highest default

```{python}
cols_sum = ['REPAY_SEPT', 'REPAY_AUG', 'REPAY_JUL', 'REPAY_JUN', 'REPAY_MAY', 'REPAY_APR']
df['Repay_Sum'] = df[cols_sum].sum(axis=1)
```

- boxplot to check where the median of sums lie

```{python}
sns.boxplot(x = df['default.payment.next.month'], y = df.Repay_Sum)
plt.title("Sum of Repayment vs default")
```

- representation of people default groups

```{python}
minNo = 30
filter_df = df[df['Repay_Sum']>=minNo] 
print("number of people with more than 30 months of default:", filter_df.shape[0] )

minNo2 = 20
filter_df1 = df[(df['Repay_Sum']>=minNo2)&(df['Repay_Sum']<minNo)] 
print("number of people with more than 20 months but less than 30 months of default:", filter_df1.shape[0]) 

minNo3 = 10
filter_df2 = df[(df['Repay_Sum']>=minNo3)&(df['Repay_Sum']<minNo2)] 
print("number of people with more than 10 months but less than 20 months of default:", filter_df2.shape[0] )

minNo4 = 0
filter_df3 = df[(df['Repay_Sum']>=minNo4)&(df['Repay_Sum']<minNo3)] 
print("number of people with more than 0 months but less than 10 months of default:", filter_df3.shape[0])
```

- graphical representation of people default groups 

```{python}
plt.figure(figsize=(5,5))
bins = [0,10,20,30,40,50]
plt.hist(df.Repay_Sum, bins, edgecolor = 'black')
plt.title('delay months range from 0-50')
plt.show()
```

### mean of repay_(month)

- found highest mean of deafult

```{python}
cols_sum = ['REPAY_SEPT', 'REPAY_AUG', 'REPAY_JUL', 'REPAY_JUN', 'REPAY_MAY', 'REPAY_APR']
df['Repay_mean'] = df[cols_sum].mean(axis=1)
```

- boxplot to check where the median of means lie
- it shows that the median of sums and means is similar 

```{python}
sns.boxplot(x = df['default.payment.next.month'], y = df.Repay_mean)
plt.title("Mean of Repayment vs default")
```

- checking median of deafults with respect to sex and repayment means
- median is similar can't use

```{python}
sns.boxplot(x = df['default.payment.next.month'], y = df.Repay_mean, hue= df.SEX)
plt.title("Sum of Repayment vs default wrt. Sex")
```

- checking median of deafults with respect to education and repayment means
- median for university and high school is higher 

```{python}
sns.boxplot(x = df['default.payment.next.month'], y = df.Repay_mean, hue= df.EDUCATION)
plt.title("Sum of Repayment vs default wrt. Education")
```

- checking median of deafults with respect to marriage and repayment means
- median is similar so can't use

```{python}
sns.boxplot(x = df['default.payment.next.month'], y = df.Repay_mean, hue= df.MARRIAGE)
plt.title("Sum of Repayment vs default wrt. Marriage Status")
```

## Prob of default with demographics 

### Default based on age

- median is similar so can't use

```{python}
sns.boxplot(data=df, x = df['default.payment.next.month'], y = df['AGE'], orient='v')
plt.title("Age vs default")
```

### default based on age and sex

- male defaulters have higher median

```{python}
sns.boxplot(data=df, x = df['default.payment.next.month'], y = df['AGE'], orient='v', hue = df['SEX'])
plt.title("Age vs default wrt. Sex")
```

- median for high school is highest, therefore age of highschool is highest

```{python}
sns.boxplot(data=df, x = df['default.payment.next.month'], y = df['AGE'], orient='v', hue = df['EDUCATION'])
plt.title("Sum of Repayment vs default wrt. Education")
```

- median credit limit of highschool is minimum

```{python}
sns.boxplot(data=df, x = df['default.payment.next.month'], y = df['LIMIT_BAL'], orient='v', hue = df['EDUCATION'])
plt.title("Credit Limit vs default wrt. Education")
```

## credit limit vs default

```{python}
sns.boxplot(x = df['default.payment.next.month'], y = df.LIMIT_BAL)
plt.title("Sum of Repayment vs default")
```

```{python}
import numpy as np
sns.boxplot(x = df['default.payment.next.month'], y = np.log1p(df['LIMIT_BAL']))
plt.title("Sum of Repayment vs default")
```

```{python}
sns.histplot(x=np.log1p(df['LIMIT_BAL']), binwidth=0.5)
```

```{python}
sns.histplot(x=df.LIMIT_BAL)
```

### Credit limit vs sex

```{python}
import numpy as np
sns.boxplot(x = df['SEX'], y = np.log1p(df['LIMIT_BAL']))
plt.title("Sum of Repayment vs default")
```

### cREDIT limit vs education

```{python}
import numpy as np
sns.boxplot(x = df['EDUCATION'], y = np.log1p(df['LIMIT_BAL']))
plt.title("Sum of Repayment vs default")
```

### Credit limit vs age

```{python}
import numpy as np
sns.scatterplot(x = df['AGE'], y = (df['LIMIT_BAL']))
plt.title("Sum of Repayment vs default")
```

```{python}
sns.histplot(x=df.AGE)
```

## default based on sex

- number of women in data is more than men

```{python}
sns.countplot(data=df, x= df['SEX'])
plt.title("Men and Women count in Data")
```

### women

- finding total number of women defaulted 
- finding percentage of women defaulting among total women

```{python}
women = df[(df['default.payment.next.month'] == 1) & (df.SEX=='F')]
print("total no of women defaulters:", women.shape[0])

percent_F_def = (women.shape[0]/df[df['SEX']=='F'].shape[0])*100
print("percentage of women defaulters:", percent_F_def)
```

- graphical representation of relationship status of defaulting women

```{python}
sns.countplot(x= women['MARRIAGE'])
plt.title("Relationship Status of Defaulting Women")
```

#### married

- no of married women among total women defaluters

```{python}
mwomen = women[women.MARRIAGE=='married']
mwomen.shape[0]
```

```{python}
mwomen_graph = sns.countplot(x= mwomen['EDUCATION'])

legend_labels = ['School Graduates', 'University', 'High School', 'Others', 'Unknown']

handles = [plt.Rectangle((0,0),1,1, color=mwomen_graph.patches[i].get_facecolor()) for i in range(len(legend_labels))]
plt.legend(handles, legend_labels, title='Legend')


plt.title("Number of Educated Married Women")
```

#### single

- total single women defaulters 

```{python}
swomen = women[women.MARRIAGE=='single']
swomen.shape[0]
```

```{python}
swomen_graph = sns.countplot(x= swomen['EDUCATION'])

legend_labels = ['School Graduates', 'University', 'High School', 'Others', 'Unknown']

handles = [plt.Rectangle((0,0),1,1, color=swomen_graph.patches[i].get_facecolor()) for i in range(len(legend_labels))]
plt.legend(handles, legend_labels, title='Legend')


plt.title("Number of Educated Single Women")
```

### men 

- finding total number of men defaulted 
- finding percentage of men defaulting among total men

```{python}
men = df[(df['default.payment.next.month'] == 1) & (df.SEX=='M')]
print("total no of men defaulters:", men.shape[0])

percent_M_def = (men.shape[0]/df[df['SEX']=='M'].shape[0])*100
print("percentage of men defaulters:", percent_M_def)
```

- graphical representation of relationship status of defaulting men

```{python}
sns.countplot(x= men['MARRIAGE'])
plt.title("Relationship Status of Defaulting Men")
```

#### married

- no of married men among total women defaluters

```{python}
mmen = men[men.MARRIAGE=='married']
men.shape[0]
```

```{python}
mmen_graph = sns.countplot(x= mmen['EDUCATION'])

legend_labels = ['School Graduates', 'University', 'High School', 'Others', 'Unknown']

handles = [plt.Rectangle((0,0),1,1, color=mmen_graph.patches[i].get_facecolor()) for i in range(len(legend_labels))]
plt.legend(handles, legend_labels, title='Legend')


plt.title("Number of Educated Married Men")
```

#### single 

- total single men defaulters 

```{python}
smen = men[men.MARRIAGE=='single']
smen.shape[0]
```

```{python}
smen_graph = sns.countplot(x= smen['EDUCATION'])

legend_labels = ['School Graduates', 'University', 'High School', 'Others', 'Unknown']

handles = [plt.Rectangle((0,0),1,1, color=smen_graph.patches[i].get_facecolor()) for i in range(len(legend_labels))]
plt.legend(handles, legend_labels, title='Legend')


plt.title("Number of Educated Single Men")
```

- combining the graphs

## default based on education

- university defaulters

```{python}
edu_uni = df[(df.EDUCATION== 2)]     
print("total university data:", edu_uni.shape[0])  

total_uni_def = df[(df.EDUCATION==2)&(df['default.payment.next.month']==1)&(df.MARRIAGE != 'others')].shape[0]
print("total university defaulters:", total_uni_def)
percentage2 = (total_uni_def/edu_uni.shape[0])*100
print("percentage of uni defaulters: ",percentage2)
```

- high school defaulters

```{python}
edu_high = df[(df.EDUCATION== 3)]                 
print("total highschool data:", edu_high.shape[0])

total_hschool_def = df[(df.EDUCATION==3)&(df['default.payment.next.month']==1)&(df.MARRIAGE != 'others')].shape[0]
print("total highschool defaulters:", total_hschool_def)
percentage3 = (total_hschool_def/edu_high.shape[0])*100
print("percentage of highschool defaulters: ",percentage3)
```

```{python}
data = {
    'Category': ['University', 'High School'],
    'Total Data': [edu_uni.shape[0], edu_high.shape[0]],
    'Total Defaulters': [total_uni_def, total_hschool_def],
    'Percentage of Defaulters': [percentage2, percentage3]
}

df_plot = pd.DataFrame(data)

sns.barplot(data=df_plot, x='Category', y='Total Defaulters')

plt.xlabel('Category')
plt.ylabel('Total Defaulters')
plt.title('Number of Defaulters by Category')

plt.show()
```

## DATA TRANSFORMATION

- transforming wide data to long data for repayment status 

```{python}
long_df = df.melt(id_vars=['default.payment.next.month'], value_vars=['REPAY_APR','REPAY_MAY','REPAY_JUN','REPAY_JUL','REPAY_AUG','REPAY_SEPT'], var_name= 'metric', value_name='delay')
print(long_df)
```

- repayment in sept is delayed increasing chances of default in next month

```{python}
sns.boxplot(x = long_df['metric'], y= long_df.delay, hue=long_df['default.payment.next.month'])
plt.title("delay/month vs delay month wrt. default")
```

- transforming wide data to long data for bill amount

```{python}
long_df1 = df.melt(id_vars=['default.payment.next.month'] , value_vars=['BILL_APR','BILL_MAY','BILL_JUN','BILL_JUL','BILL_AUG','BILL_SEPT'], var_name= 'metric', value_name='amount')
print(long_df1)
```

- the data is skewed

```{python}
sns.boxplot(long_df1, x='metric', y = 'amount', hue='default.payment.next.month')
plt.title("Billimg amount vs bill month wrt. default")
```

- transforming wide data to long data for paid amount 

```{python}
long_df2 = df.melt(id_vars=['default.payment.next.month'], value_vars=['PAID_APR','PAID_MAY','PAID_JUN','PAID_JUL','PAID_AUG','PAID_SEPT'], var_name= 'metric', value_name='amount')
print(long_df2)
```

- the data is highly skewed

```{python}
sns.boxplot(long_df2, x='metric',y='amount', hue='default.payment.next.month')
plt.title("Paid amount vs Paid month wrt. default")
```

### Creating Subplot 

- interpreting the repayment status relation to defaluts further 

```{python}
g = sns.FacetGrid(long_df, row='default.payment.next.month', col='metric', sharex=False, sharey=False, height=5)
g.map_dataframe(sns.countplot, x='delay')
```

- interpreting the bill amounts relation to defaluts further 

```{python}
g = sns.FacetGrid(long_df1, row='default.payment.next.month', col='metric', sharex=False, sharey=False, height=5)
g.map_dataframe(sns.histplot, x='amount', binrange=(0,250000))
```

- interpreting the paid amounts relation to defaluts further 

```{python}
g = sns.FacetGrid(long_df2, row='default.payment.next.month', col='metric', sharex=False, sharey=False, height=5)
g.map_dataframe(sns.histplot, x='amount', binrange=(0,25000))
```

## Extracting Cleaned Data

```{python}
file_path = r'D:\source\repos\OrionDataAnalyticsInternshipJul23\data\clean/'
file_name = "credit_default.csv"
extract_info = file_path + file_name
df.to_csv(extract_info, index=False)
```

